
% MATLAB Script to run ICA and prune Data using SASICA
% 1. RUN ICA (binica) for each participant and save dataset
% 2. Load the ICAed dataset, run SASICA on it to prune it from artefactual
%    components. This can be done manually, but SASICA does a fairly good
%    job automatically, provided the parameters are selected properly.
%    % We've chosen auto-correlation and ADJUST algorithm based rejections
%    % For reasonably good data (namely, adult EEG data), this may an
%    % overkill; use EOG channel correlations in that case (we didn't have
%    % that choice here!)
% 3. NOW, and here's the crux of the thing, load THE_MAIN_PREICA_DATASET,
%    which is the one with the bad channels removed, but without the
%    pre-ICA manual rejections (from the last step).
% 4. Copy the ICA related things (wins, spheres, weights..) from the ICAed
%    and SASICAed dataset to THE_MAIN_PREICA_DATASET. But not the
%    activations.  These should be calculated (see below).
% 5. Copy the bad components list generated by SASICA/ADJUST from the ICAed
%    and SASICAed dataset to THE_MAIN_PREICA_DATASET.
% 6. Now, forget the ICAed and SASICAed dataset.
% 7. Prune data: Reject bad components from THE_MAIN_PREICA_DATASET.
% 8. SAVE this dataset separately, and check (with channel scroll) whether the blink
%    artefacts you had in THE_MAIN_PREICA_DATASET are gone!  They must have!
% 9. This is THE_ICA_PRUNED_DATASET.
%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%m


for V_Counter = 1:length(CA_Participants)

    V_Participant = CA_Participants{V_Counter};

    V_DataFile = fullfile(V_FileOut, [V_Participant, 'ica_in.set']);
    EEG = pop_loadset('filename', V_DataFile);


    % Change to the participant's folder, so the binica.* files will be stored there
%     V_Command = sprintf('../%s', V_Participant);
%     cd(V_Command);

    % ICA

   N_of_Components = EEG.nbchan;
    EEG = pop_runica(EEG,'options',{'extended', 1, 'pca', N_of_Components});
 
    


    % Calculate ICA Activations -- http://sccn.ucsd.edu/wiki/Binica
    EEG.icaact = EEG.icaweights*EEG.icasphere*EEG.data;  % Matrix multiplication




    % Save the resultant file as an EEGLab .set

    EEG.filename = [V_Participant 'ica_out.set'];
    EEG.filepath = V_Icaout;
    EEG.comments = char([V_Participant, '_ica_out'], ['; Sampling Rate: 500 Hz; BPF: 0.3-40 Hz; ReRef: Common; With ICA Weights']);
    pop_saveset(EEG, 'filename', EEG.filename, 'filepath', EEG.filepath);

    fprintf('########################################################\n\n');
    fprintf('Saved ICA data for ... %s.\n\n', V_Participant);

 
  
end
  % ##################################################################################
  
for V_Counter = 1:length(CA_Participants)
  % try this part  (for resting state data is not a problem)
    V_Participant = CA_Participants{V_Counter};

    V_DataFile = fullfile(V_Icaout,[V_Participant, 'ica_out.set']);
    EEG_ICA = pop_loadset('filename', V_DataFile);
   
    % use this for full automatic IC selection
    % EEG = eeg_SASICA(EEG,'MARA_enable',0,'FASTER_enable',0,'FASTER_blinkchanname','No channel','ADJUST_enable',1,'chancorr_enable',0,'chancorr_channames','No channel','chancorr_corthresh','auto 4','EOGcorr_enable',0,'EOGcorr_Heogchannames','No channel','EOGcorr_corthreshH','auto 4','EOGcorr_Veogchannames','No channel','EOGcorr_corthreshV','auto 4','resvar_enable',0,'resvar_thresh',15,'SNR_enable',0,'SNR_snrcut',1,'SNR_snrBL',[-Inf 0] ,'SNR_snrPOI',[0 Inf] ,'trialfoc_enable',0,'trialfoc_focaltrialout','auto','focalcomp_enable',1,'focalcomp_focalICAout','auto','autocorr_enable',1,'autocorr_autocorrint',20,'autocorr_dropautocorr','auto','opts_noplot',1,'opts_nocompute',0,'opts_FontSize',14);
    % ------------------
    
    
    % use this for IC manual selection
    EEG_ICA = SASICA();
    waitfor(gcf);
    % ---------------------
    
    
    V_DataFile = fullfile(V_FileOut,  [V_Participant, 'ica_bc.set']);
    EEG = pop_loadset('filename', V_DataFile);
    
    
    
    % Copy the ICA weights and spheres and SASICA rejections to the main data set
    
    % EEG.icaact should not be copied from the ICA dataset to the main one,
    % for the number of data points is different (because of pre-ICA
    % cleanup). Instead, copy the weights and spheres, and calculate the
    % activations for the main data.
    
    EEG.icawinv = EEG_ICA.icawinv;
    EEG.icasphere = EEG_ICA.icasphere;
    EEG.icaweights = EEG_ICA.icaweights;
    EEG.icachansind = EEG_ICA.icachansind;
    
    EEG.icaact = EEG.icaweights*EEG.icasphere*EEG.data;  % Matrix multiplication
    
    EEG.reject.gcompreject = EEG_ICA.reject.gcompreject;
    EEG.reject.SASICA = EEG_ICA.reject.SASICA;
    
    % Extract the Component numbers to remove from the output of
    % SASICA in EEG.reject.gcompreject.  Wherever this is 1, that
    % particular ICA component needs to be removed from the data.
    
    
    V_Components_to_remove = find(EEG.reject.gcompreject == 1);

    % Remove the components from the main data without further ado!

    EEG = pop_subcomp(EEG, V_Components_to_remove);
    % EEG = pop_subcomp(EEG, V_Components_to_remove, 1); % To ask for
    % confirmation, and visualise the difference that the removals would
    % make to the data.

    % Save the resultant file as an EEGLab .set
% 
    EEG.filename = [V_Participant 'ica_pruned.set'];
    EEG.filepath = V_Icaout;
    EEG.comments = char([V_Participant, 'ica_pruned'], ['; Sampling Rate: 500 Hz; BPF: 0.3-40 Hz; ReRef: Linked Mastoids; SASICA based ICA Pruned Original Data']);
    pop_saveset(EEG, 'filename', EEG.filename, 'filepath', EEG.filepath);

    fprintf('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n');
    fprintf('Saved ICA Pruned data for ... %s.\n\n', V_Participant);
    fprintf('Number of Removed Components ... %d. \n\n', length(V_Components_to_remove));
    fprintf('########################################################\n\n');

%  Om



end

fprintf('Number of participants for which SASICA was not performed: %d. \n\n', V_Participants_Ignored);


